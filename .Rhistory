body <-content (response, "text")
results <-as.data.frame(fromJSON(body))
return(results)
}
create.data.frame <- function(results) {
list <- as.data.frame(results$results.lists.books)
length <- as.numeric(length(results$results.lists.books))
info_total <- list %>% select(author, title, weeks_on_list)
for (i in 1:(length - 1)) {
i <- as.numeric(i)
author.row <- paste0('author.', i)
title.row <- paste0('title.', i)
weeks_on_list.row <- paste0('weeks_on_list.', i)
info <- list %>% select(author = author.row,
title = title.row,
weeks_on_list = weeks_on_list.row)
df <- data.frame(info)
info_total <- rbind(info_total, df)
}
info_total <- info_total %>%
distinct() %>%
group_by(author) %>%
arrange(-weeks_on_list)
return(info_total)
}
library(jsonlite)
library(dplyr)
library(httr)
weihao.api.key = 'd5996a954fbf40e788bf0a3a16e5643c'
date <- '2015-01-26'
getPublisherInfo <- function(date) {
base.url <-"https://api.nytimes.com/svc/books/v3/lists/overview.json"
query.params <- list("api-key" = weihao.api.key, "published_date" = date)
response <- GET(base.url, query = query.params)
body <-content (response, "text")
results <-as.data.frame(fromJSON(body))
list <- as.data.frame(results$results.lists.books)
length <- as.numeric(length(results$results.lists.books))
publisher.info <- list %>% select(publisher, title, weeks_on_list)
for (i in 1:(length - 1)) {
publisher.row <- paste0('publisher.', i)
title.row <- paste0('title.', i)
weeks_on_list.row <- paste0('weeks_on_list.', i)
info <- list %>% select(publisher = publisher.row,
title = title.row,
weeks_on_list = weeks_on_list.row)
df <- data.frame(info)
publisher_info <- rbind(publisher.info, df)
}
publisher_info <- publisher_info %>%
distinct() %>%
group_by(publisher) %>%
arrange(-weeks_on_list)
return(publisher_info)
}
runApp('~/Documents/INFO/FinalProject-Goodreads')
runApp('~/Documents/INFO/FinalProject-Goodreads')
View(publisher.info)
runApp('~/Documents/INFO/FinalProject-Goodreads')
runApp('~/Documents/INFO/FinalProject-Goodreads')
runApp('~/Documents/INFO/FinalProject-Goodreads')
runApp('~/Documents/INFO/FinalProject-Goodreads')
runApp('~/Documents/INFO/FinalProject-Goodreads')
runApp('~/Documents/INFO/FinalProject-Goodreads')
runApp('~/Documents/INFO/FinalProject-Goodreads')
runApp('~/Documents/INFO/FinalProject-Goodreads')
runApp('~/Documents/INFO/FinalProject-Goodreads')
runApp('~/Documents/INFO/FinalProject-Goodreads')
runApp('~/Documents/INFO/FinalProject-Goodreads')
runApp('~/Documents/INFO/FinalProject-Goodreads')
runApp('~/Documents/INFO/FinalProject-Goodreads')
runApp('~/Documents/INFO/FinalProject-Goodreads')
runApp('~/Documents/INFO/FinalProject-Goodreads')
runApp('~/Documents/INFO/FinalProject-Goodreads')
runApp('~/Documents/INFO/FinalProject-Goodreads')
runApp('~/Documents/INFO/FinalProject-Goodreads')
runApp('~/Documents/INFO/FinalProject-Goodreads')
runApp('~/Documents/INFO/FinalProject-Goodreads')
setwd("~/Documents/INFO/FinalProject-Goodreads")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
tidy_books %>%
inner_join(get_sentiments("bing")) %>%
count(word, sentiment, sort = TRUE) %>%
acast(word ~ sentiment, value.var = "n", fill = 0) %>%
comparison.cloud(colors = c("#F8766D", "#00BFC4"),
max.words = 100)
library(reshape2)
library(wordcloud)
tidy_books %>%
anti_join(stop_words) %>%
count(word) %>%
with(wordcloud(word, n, max.words = 100))
tidy_books %>%
inner_join(get_sentiments("bing")) %>%
count(word, sentiment, sort = TRUE) %>%
acast(word ~ sentiment, value.var = "n", fill = 0) %>%
comparison.cloud(colors = c("#F8766D", "#00BFC4"),
max.words = 100)
tidy_books <- austen_books() %>%
group_by(book) %>%
mutate(linenumber = row_number(),
chapter = cumsum(str_detect(text, regex("^chapter [\\divxlc]",
ignore_case = TRUE)))) %>%
ungroup() %>%
unnest_tokens(word, text)
library(reshape2)
library(wordcloud)
tidy_books <- austen_books() %>%
group_by(book) %>%
mutate(linenumber = row_number(),
chapter = cumsum(str_detect(text, regex("^chapter [\\divxlc]",
ignore_case = TRUE)))) %>%
ungroup() %>%
unnest_tokens(word, text)
bing_word_counts %>%
group_by(sentiment) %>%
top_n(10) %>%
ungroup() %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n, fill = sentiment)) +
geom_col(show.legend = FALSE) +
facet_wrap(~sentiment, scales = "free_y") +
labs(y = "Contribution to sentiment",
x = NULL) +
coord_flip()
tidy_books %>%
anti_join(stop_words) %>%
count(word) %>%
with(wordcloud(word, n, max.words = 100))
tidy_books %>%
inner_join(get_sentiments("bing")) %>%
count(word, sentiment, sort = TRUE) %>%
acast(word ~ sentiment, value.var = "n", fill = 0) %>%
comparison.cloud(colors = c("#F8766D", "#00BFC4"),
max.words = 100)
library(reshape2)
library(wordcloud)
library(janeaustenr)
library(dplyr)
library(stringr)
tidy_books <- austen_books() %>%
group_by(book) %>%
mutate(linenumber = row_number(),
chapter = cumsum(str_detect(text, regex("^chapter [\\divxlc]",
ignore_case = TRUE)))) %>%
ungroup() %>%
unnest_tokens(word, text)
bing_word_counts %>%
group_by(sentiment) %>%
top_n(10) %>%
ungroup() %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n, fill = sentiment)) +
geom_col(show.legend = FALSE) +
facet_wrap(~sentiment, scales = "free_y") +
labs(y = "Contribution to sentiment",
x = NULL) +
coord_flip()
tidy_books %>%
anti_join(stop_words) %>%
count(word) %>%
with(wordcloud(word, n, max.words = 100))
tidy_books %>%
inner_join(get_sentiments("bing")) %>%
count(word, sentiment, sort = TRUE) %>%
acast(word ~ sentiment, value.var = "n", fill = 0) %>%
comparison.cloud(colors = c("#F8766D", "#00BFC4"),
max.words = 100)
base.url <- 'http://api.nytimes.com/svc/books/v3/reviews.json'
query.params <- list(isbn="978-0375842207", title= "The Book Thief", api_key = "ea72724367394deda8de8d2116ed19b6")
response <- GET(base.url, query = query.params)
body <- content(response, "text")
results <- fromJSON(body)
book.reviews <- flatten(results$results)
url <- book.reviews$url[1]
#more than one review - multiple word clouds -- if statement
#page <- read_html('http://www.nytimes.com/2006/05/14/books/review/14greenj.html')
#page <- read_html(book.reviews$url[1])
page <- read_html(url)
# Extract the text of review from webpage
#used the google chrome extension SelectorGadget to figure out
#which part of the html is needed
review.content <- page %>% html_nodes('.story-body-text') %>% html_text()
# Create dataframe of text
dfcontent <- data.frame(review.content, stringsAsFactors = FALSE)
# Create tidytext structure of all words in review
all.words <- dfcontent %>% unnest_tokens(word, review.content)
#Get all word counts
word.count <- all.words %>%
group_by(word) %>%
summarize(count = n()) %>%
arrange(-count)
# Remove stop words
content.words <- word.count %>%
anti_join(stop_words, by="word")
#Get content word counts -- arrange content.words by descending count
content.count <- content.words %>%
arrange(-count)
#negative + pos  words in LEXICON, not data
nrc.neg <- get_sentiments("nrc") %>%
filter(sentiment == "negative")
nrc.pos <- get_sentiments("nrc") %>%
filter(sentiment == "positive")
#counts of neg words
neg.words <- content.count %>%
inner_join(nrc.neg, by ="word")
#counts of pos words
pos.words <- content.count %>%
inner_join(nrc.pos, by ="word")
content.sent <- bind_rows(pos.words, neg.words)
cloud <- content.sent %>%
count(word, sentiment, sort =TRUE) %>%
acast(word ~ sentiment, value.var = "n", fill = 0) %>%
comparison.cloud(scale = c(1.2,.5), random.order=TRUE, colors = c("#F8766D", "#00BFC4"),
title.size =2, max.words = 100)
library(tidytext)
library(tidytext)
library(dplyr)
library(stringr)
library(wordcloud)
library(reshape2)
libary(wordcloud)
load('wordcloud')
runApp()
library("jsonlite")
library("httr")
library("tidytext")
library("dplyr")
library("stringr")
library("rvest")
library("wordcloud")
install.packages('wordcloud')
library("wordcloud")
library("jsonlite")
library("httr")
library("tidytext")
library("dplyr")
library("stringr")
library("rvest")
library("wordcloud")
source("./api-key.R")
# test example: reviewdata <- ReviewWords("978-0375842207", "The Book Thief")
# Get all words in the book review
ReviewWords <- function(book.isbn, book.title) {
base.url <- 'http://api.nytimes.com/svc/books/v3/reviews.json'
query.params <- list(isbn = book.isbn, title = book.title,  api_key = key)
response <- GET(base.url, query = query.params)
body <- content(response, "text")
results <- fromJSON(body)
book.reviews <- flatten(results$results)
url <- book.reviews$url[1]
page <- read_html(url)
# Extract review text from webpage
review.content <- page %>% html_nodes('.story-body-text') %>% html_text()
# Create review text dataframe
dfcontent <- data.frame(review.content, stringsAsFactors = FALSE)
# Create tidytext structure of all words in review
all.words <- dfcontent %>% unnest_tokens(word, review.content)
# Get all word counts
word.count <- all.words %>%
group_by(word) %>%
summarize(count = n()) %>%
arrange(-count)
# Remove stop words
content.words <- word.count %>%
anti_join(stop_words, by="word")
# Get content word counts -- arrange content.words by descending count
content.count <- content.words %>%
arrange(-count)
return(content.count)
}
reviewdata <- ReviewWords <- function(book.isbn, book.title)
# Get wordcloud with negative words in review
NegativeCloud <- function(reviewdata) {
# Get negative words in "nrc" Lexicon
nrc.neg <- get_sentiments("nrc") %>%
filter(sentiment == "negative")
# Count the negative words in the review data
neg.words <- reviewdata %>%
inner_join(nrc.neg, by ="word")
# Create the negative word cloud
ncloud <- wordcloud(neg.words$word, neg.words$count, scale = c(3,.5), min.freq = 1, max.words = Inf, random.order = TRUE, colors = "#C40500")
return(ncloud)
}
negative.cloud <- NegativeCloud(reviewdata)
# Get wordcloud with positive words in review
PositiveCloud <- function(content.count) {
# Get positive words in "nrc" Lexicon
nrc.pos <- get_sentiments("nrc") %>%
filter(sentiment == "positive")
# Count the positive words in the review data
pos.words <- content.count %>%
inner_join(nrc.pos, by ="word")
# Create the positive word cloud
pcloud <- wordcloud(pos.words$word, pos.words$count, scale = c(3,.5), min.freq = 1, max.words = Inf,
random.order = TRUE, colors = "#00BFC4")
return(pcloud)
}
positive.cloud <- PositiveCloud(reviewdata)
#this source: http://tidytextmining.com/tidytext.html
#provided helpful information for working with tidytext data and
#for text mining in R
source("api.key.R")
# test example: reviewdata <- ReviewWords("978-0375842207", "The Book Thief")
# Get all words in the book review
ReviewWords <- function(book.isbn, book.title) {
base.url <- 'http://api.nytimes.com/svc/books/v3/reviews.json'
query.params <- list(isbn = book.isbn, title = book.title,  api_key = key)
response <- GET(base.url, query = query.params)
body <- content(response, "text")
results <- fromJSON(body)
book.reviews <- flatten(results$results)
url <- book.reviews$url[1]
page <- read_html(url)
# Extract review text from webpage
review.content <- page %>% html_nodes('.story-body-text') %>% html_text()
# Create review text dataframe
dfcontent <- data.frame(review.content, stringsAsFactors = FALSE)
# Create tidytext structure of all words in review
all.words <- dfcontent %>% unnest_tokens(word, review.content)
# Get all word counts
word.count <- all.words %>%
group_by(word) %>%
summarize(count = n()) %>%
arrange(-count)
# Remove stop words
content.words <- word.count %>%
anti_join(stop_words, by="word")
# Get content word counts -- arrange content.words by descending count
content.count <- content.words %>%
arrange(-count)
return(content.count)
}
reviewdata <- ReviewWords <- function(book.isbn, book.title)
# Get wordcloud with negative words in review
NegativeCloud <- function(reviewdata) {
# Get negative words in "nrc" Lexicon
nrc.neg <- get_sentiments("nrc") %>%
filter(sentiment == "negative")
# Count the negative words in the review data
neg.words <- reviewdata %>%
inner_join(nrc.neg, by ="word")
# Create the negative word cloud
ncloud <- wordcloud(neg.words$word, neg.words$count, scale = c(3,.5), min.freq = 1, max.words = Inf, random.order = TRUE, colors = "#C40500")
return(ncloud)
}
negative.cloud <- NegativeCloud(reviewdata)
# Get wordcloud with positive words in review
PositiveCloud <- function(content.count) {
# Get positive words in "nrc" Lexicon
nrc.pos <- get_sentiments("nrc") %>%
filter(sentiment == "positive")
# Count the positive words in the review data
pos.words <- content.count %>%
inner_join(nrc.pos, by ="word")
# Create the positive word cloud
pcloud <- wordcloud(pos.words$word, pos.words$count, scale = c(3,.5), min.freq = 1, max.words = Inf,
random.order = TRUE, colors = "#00BFC4")
return(pcloud)
}
positive.cloud <- PositiveCloud(reviewdata)
#this source: http://tidytextmining.com/tidytext.html
#provided helpful information for working with tidytext data and
#for text mining in R
source("api.key.R")
# test example: reviewdata <- ReviewWords("978-0375842207", "The Book Thief")
book.isbn <- "978-0375842207"
book.title <- "The Book Thief"
base.url <- 'http://api.nytimes.com/svc/books/v3/reviews.json'
query.params <- list(isbn = book.isbn, title = book.title,  api_key = key)
response <- GET(base.url, query = query.params)
body <- content(response, "text")
results <- fromJSON(body)
book.reviews <- flatten(results$results)
url <- book.reviews$url[1]
page <- read_html(url)
book.isbn <- "978-0375842207"
book.title <- "The Book Thief"
base.url <- 'http://api.nytimes.com/svc/books/v3/reviews.json'
query.params <- list(isbn = book.isbn, title = book.title,  api_key = key)
response <- GET(base.url, query = query.params)
body <- content(response, "text")
results <- fromJSON(body)
book.reviews <- flatten(results$results)
url <- book.reviews$url[1]
page <- read_html(url)
# Extract review text from webpage
review.content <- page %>% html_nodes('.story-body-text') %>% html_text()
# Create review text dataframe
dfcontent <- data.frame(review.content, stringsAsFactors = FALSE)
# Create tidytext structure of all words in review
all.words <- dfcontent %>% unnest_tokens(word, review.content)
# Get all word counts
word.count <- all.words %>%
group_by(word) %>%
summarize(count = n()) %>%
arrange(-count)
book.isbn <- "978-0375842207"
book.title <- "The Book Thief"
base.url <- 'http://api.nytimes.com/svc/books/v3/reviews.json'
query.params <- list(isbn = book.isbn, title = book.title,  api_key = key)
response <- GET(base.url, query = query.params)
body <- content(response, "text")
results <- fromJSON(body)
book.reviews <- flatten(results$results)
url <- book.reviews$url[1]
page <- read_html(url)
# Extract review text from webpage
review.content <- page %>% html_nodes('.story-body-text') %>% html_text()
# Create review text dataframe
dfcontent <- data.frame(review.content, stringsAsFactors = FALSE)
# Create tidytext structure of all words in review
all.words <- dfcontent %>% unnest_tokens(word, review.content)
# Get all word counts
word.count <- all.words %>%
group_by(word) %>%
summarize(count = n()) %>%
arrange(-count)
# Extract review text from webpage
review.content <- page %>% html_nodes('.story-body-text') %>% html_text()
# Create review text dataframe
dfcontent <- data.frame(review.content, stringsAsFactors = FALSE)
# Create tidytext structure of all words in review
all.words <- dfcontent %>% unnest_tokens(word, review.content)
# Get all word counts
word.count <- all.words %>%
group_by(word) %>%
summarize(count = n()) %>%
arrange(-count)
book.isbn <- "978-0375842207"
book.title <- "The Book Thief"
base.url <- 'http://api.nytimes.com/svc/books/v3/reviews.json'
query.params <- list(isbn = book.isbn, title = book.title,  api_key = key)
response <- GET(base.url, query = query.params)
body <- content(response, "text")
results <- fromJSON(body)
book.reviews <- flatten(results$results)
url <- book.reviews$url[1]
page <- read_html(url)
# Extract review text from webpage
review.content <- page %>% html_nodes('.story-body-text') %>% html_text()
# Create review text dataframe
dfcontent <- data.frame(review.content, stringsAsFactors = FALSE)
book.isbn <- "978-0375842207"
book.title <- "The Book Thief"
base.url <- 'http://api.nytimes.com/svc/books/v3/reviews.json'
query.params <- list(isbn = book.isbn, title = book.title,  api_key = key)
response <- GET(base.url, query = query.params)
body <- content(response, "text")
results <- fromJSON(body)
book.reviews <- flatten(results$results)
url <- book.reviews$url[1]
page <- read_html(url)
book.isbn <- "978-0375842207"
book.title <- "The Book Thief"
base.url <- 'http://api.nytimes.com/svc/books/v3/reviews.json'
query.params <- list(isbn = book.isbn, title = book.title,  api_key = key)
response <- GET(base.url, query = query.params)
body <- content(response, "text")
results <- fromJSON(body)
source("api.key.R")
# test example: reviewdata <- ReviewWords("978-0375842207", "The Book Thief")
book.isbn <- "978-0375842207"
book.title <- "The Book Thief"
base.url <- 'http://api.nytimes.com/svc/books/v3/reviews.json'
query.params <- list(isbn = book.isbn, title = book.title,  api_key = key)
response <- GET(base.url, query = query.params)
body <- content(response, "text")
results <- fromJSON(body)
response <- GET(base.url, query = query.params)
query.params <- list(isbn = book.isbn, title = book.title,  api_key = key)
source("api.key.R")
# test example: reviewdata <- ReviewWords("978-0375842207", "The Book Thief")
book.isbn <- "978-0375842207"
book.title <- "The Book Thief"
base.url <- 'http://api.nytimes.com/svc/books/v3/reviews.json'
query.params <- list(isbn = book.isbn, title = book.title,  api_key = key)
response <- GET(base.url, query = query.params)
body <- content(response, "text")
results <- fromJSON(body)
book.reviews <- flatten(results$results)
url <- book.reviews$url[1]
page <- read_html(url)
review.content <- page %>% html_nodes('.story-body-text') %>% html_text()
dfcontent <- data.frame(review.content, stringsAsFactors = FALSE)
View(dfcontent)
all.words <- dfcontent %>% unnest_tokens(word, review.content)
# Get all word counts
word.count <- all.words %>%
group_by(word) %>%
summarize(count = n()) %>%
arrange(-count)
# Remove stop words
content.words <- word.count %>%
anti_join(stop_words, by="word")
View(content.words)
runApp()
setwd("~/Documents/INFO/FinalProject-Goodreads")
runApp()
runApp()
runApp()
runApp()
query.params <- list("api-key" = key, "published_date" = date)
runApp()
runApp('~/Documents/INFO/Final Project')
runApp('~/Documents/INFO/Final Project')
