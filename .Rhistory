full.url <- paste0(base.url, overview.end.point, 'published_date=', date, '&', 'api-key=', key)
results <- fromJSON(full.url)
# store data into a dataframe
flattened <- flatten(results$results$lists)
# store authors into a dataframe
list <- flattened[[9]]
authors <- list[[4]] %>% select(author)
num.authors <- summarise(authors, count = n())
# get books by authors
author.end.point <- 'best-sellers/history.json?'
i <- 2
while (i <= 2) {
author <- authors[[i, 'author']]
author.1.url <- paste0(base.url, author.end.point,
'author=', author, '&', 'api-key=', key)
author.1.url <- URLencode(author.1.url)
author.1.results <- fromJSON(author.1.url)
flatten.author.1 <- flatten(author.1.results$results)
num.books.by.author <- as.numeric(author.1.results$num_results)
# get history
book.rank.history <- flatten.author.1[[10]]
# get num weeks
j <- 2
l <- list();
while(j <= num.books.by.author) {
weeks.on.list <- book.rank.history[[j]]
total.weeks <- weeks.on.list %>% summarise(weeks = sum(weeks_on_list))
l[[j]] <- total.weeks
j <- j + 1
}
i <- i + 1
}
books <- flatten.author.1$title
books.by.author <- data.frame(author, books, l)
############### things to work on ###############
# make widget to retrieve date from user input
# replace empty rows with zeros
# create dataframe for multiple authors
# load api key file
library(jsonlite)
library(dplyr)
# get data with API
base.url <- 'http://api.nytimes.com/svc/books/v3/lists/'
overview.end.point <- 'overview.json?'
key <- '2f6f47e7312b49239cd7617099bee3fe'
date <- '2016-03-12'
full.url <- paste0(base.url, overview.end.point, 'published_date=', date, '&', 'api-key=', key)
results <- fromJSON(full.url)
# store data into a dataframe
flattened <- flatten(results$results$lists)
# store authors into a dataframe
list <- flattened[[9]]
authors <- list[[4]] %>% select(author)
num.authors <- summarise(authors, count = n())
# get books by authors
author.end.point <- 'best-sellers/history.json?'
i <- 3
while (i <= 3) {
author <- authors[[i, 'author']]
author.1.url <- paste0(base.url, author.end.point,
'author=', author, '&', 'api-key=', key)
author.1.url <- URLencode(author.1.url)
author.1.results <- fromJSON(author.1.url)
flatten.author.1 <- flatten(author.1.results$results)
num.books.by.author <- as.numeric(author.1.results$num_results)
# get history
book.rank.history <- flatten.author.1[[10]]
# get num weeks
j <- 2
l <- list();
while(j <= num.books.by.author) {
weeks.on.list <- book.rank.history[[j]]
total.weeks <- weeks.on.list %>% summarise(weeks = sum(weeks_on_list))
l[[j]] <- total.weeks
j <- j + 1
}
i <- i + 1
}
books <- flatten.author.1$title
books.by.author <- data.frame(author, books, l)
############### things to work on ###############
# make widget to retrieve date from user input
# replace empty rows with zeros
# create dataframe for multiple authors
# load api key file
library(jsonlite)
library(dplyr)
# get data with API
base.url <- 'http://api.nytimes.com/svc/books/v3/lists/'
overview.end.point <- 'overview.json?'
key <- '2f6f47e7312b49239cd7617099bee3fe'
date <- '2016-03-12'
full.url <- paste0(base.url, overview.end.point, 'published_date=', date, '&', 'api-key=', key)
results <- fromJSON(full.url)
# store data into a dataframe
flattened <- flatten(results$results$lists)
# store authors into a dataframe
list <- flattened[[9]]
authors <- list[[4]] %>% select(author)
num.authors <- summarise(authors, count = n())
# get books by authors
author.end.point <- 'best-sellers/history.json?'
i <- 4
while (i <= 4) {
author <- authors[[i, 'author']]
author.1.url <- paste0(base.url, author.end.point,
'author=', author, '&', 'api-key=', key)
author.1.url <- URLencode(author.1.url)
author.1.results <- fromJSON(author.1.url)
flatten.author.1 <- flatten(author.1.results$results)
num.books.by.author <- as.numeric(author.1.results$num_results)
# get history
book.rank.history <- flatten.author.1[[10]]
# get num weeks
j <- 2
l <- list();
while(j <= num.books.by.author) {
weeks.on.list <- book.rank.history[[j]]
total.weeks <- weeks.on.list %>% summarise(weeks = sum(weeks_on_list))
l[[j]] <- total.weeks
j <- j + 1
}
i <- i + 1
}
books <- flatten.author.1$title
books.by.author <- data.frame(author, books, l)
############### things to work on ###############
# make widget to retrieve date from user input
# replace empty rows with zeros
# create dataframe for multiple authors
# load api key file
library(jsonlite)
library(dplyr)
# get data with API
base.url <- 'http://api.nytimes.com/svc/books/v3/lists/'
overview.end.point <- 'overview.json?'
key <- '2f6f47e7312b49239cd7617099bee3fe'
date <- '2016-03-12'
full.url <- paste0(base.url, overview.end.point, 'published_date=', date, '&', 'api-key=', key)
results <- fromJSON(full.url)
# store data into a dataframe
flattened <- flatten(results$results$lists)
# store authors into a dataframe
list <- flattened[[9]]
authors <- list[[4]] %>% select(author)
num.authors <- summarise(authors, count = n())
# get books by authors
author.end.point <- 'best-sellers/history.json?'
i <- 5
while (i <= 5) {
author <- authors[[i, 'author']]
author.1.url <- paste0(base.url, author.end.point,
'author=', author, '&', 'api-key=', key)
author.1.url <- URLencode(author.1.url)
author.1.results <- fromJSON(author.1.url)
flatten.author.1 <- flatten(author.1.results$results)
num.books.by.author <- as.numeric(author.1.results$num_results)
# get history
book.rank.history <- flatten.author.1[[10]]
# get num weeks
j <- 2
l <- list();
while(j <= num.books.by.author) {
weeks.on.list <- book.rank.history[[j]]
total.weeks <- weeks.on.list %>% summarise(weeks = sum(weeks_on_list))
l[[j]] <- total.weeks
j <- j + 1
}
i <- i + 1
}
books <- flatten.author.1$title
books.by.author <- data.frame(author, books, l)
############### things to work on ###############
# make widget to retrieve date from user input
# replace empty rows with zeros
# create dataframe for multiple authors
# load api key file
library(jsonlite)
library(dplyr)
# get data with API
base.url <- 'http://api.nytimes.com/svc/books/v3/lists/'
overview.end.point <- 'overview.json?'
key <- '2f6f47e7312b49239cd7617099bee3fe'
date <- '2016-03-12'
full.url <- paste0(base.url, overview.end.point, 'published_date=', date, '&', 'api-key=', key)
results <- fromJSON(full.url)
# store data into a dataframe
flattened <- flatten(results$results$lists)
# store authors into a dataframe
list <- flattened[[9]]
authors <- list[[4]] %>% select(author)
num.authors <- summarise(authors, count = n())
week <- list[[23]] %>% select(weeks_on_list)
# get books by authors
author.end.point <- 'best-sellers/history.json?'
View(week)
############### things to work on ###############
# make widget to retrieve date from user input
# replace empty rows with zeros
# create dataframe for multiple authors
# load api key file
library(jsonlite)
library(dplyr)
# get data with API
base.url <- 'http://api.nytimes.com/svc/books/v3/lists/'
overview.end.point <- 'overview.json?'
key <- '2f6f47e7312b49239cd7617099bee3fe'
date <- '2016-03-12'
full.url <- paste0(base.url, overview.end.point, 'published_date=', date, '&', 'api-key=', key)
results <- fromJSON(full.url)
# store data into a dataframe
flattened <- flatten(results$results$lists)
# store authors into a dataframe
list <- flattened[[9]]
authors <- list[[4]] %>% select(author)
num.authors <- summarise(authors, count = n())
week <- list[['weeks_on_list']] %>% select(weeks_on_list)
# get books by authors
author.end.point <- 'best-sellers/history.json?'
i <- 5
while (i <= 5) {
author <- authors[[i, 'author']]
author.1.url <- paste0(base.url, author.end.point,
'author=', author, '&', 'api-key=', key)
author.1.url <- URLencode(author.1.url)
author.1.results <- fromJSON(author.1.url)
flatten.author.1 <- flatten(author.1.results$results)
num.books.by.author <- as.numeric(author.1.results$num_results)
# get history
book.rank.history <- flatten.author.1[[10]]
# get num weeks
j <- 2
l <- list();
while(j <= num.books.by.author) {
weeks.on.list <- book.rank.history[[j]]
total.weeks <- weeks.on.list %>% summarise(weeks = sum(weeks_on_list))
l[[j]] <- total.weeks
j <- j + 1
}
i <- i + 1
}
books <- flatten.author.1$title
books.by.author <- data.frame(author, books, l)
############### things to work on ###############
# make widget to retrieve date from user input
# replace empty rows with zeros
# create dataframe for multiple authors
# load api key file
library(jsonlite)
library(dplyr)
# get data with API
base.url <- 'http://api.nytimes.com/svc/books/v3/lists/'
overview.end.point <- 'overview.json?'
key <- '2f6f47e7312b49239cd7617099bee3fe'
date <- '2016-03-12'
full.url <- paste0(base.url, overview.end.point, 'published_date=', date, '&', 'api-key=', key)
results <- fromJSON(full.url)
# store data into a dataframe
flattened <- flatten(results$results$lists)
# store authors into a dataframe
list <- flattened[[9]]
authors <- list[[4]] %>% select(author)
num.authors <- summarise(authors, count = n())
week <- list[['weeks_on_list']] %>% select(weeks_on_list)
View(weeks.on.list)
View(week)
############### things to work on ###############
# make widget to retrieve date from user input
# replace empty rows with zeros
# create dataframe for multiple authors
# load api key file
library(jsonlite)
library(dplyr)
# get data with API
base.url <- 'http://api.nytimes.com/svc/books/v3/lists/'
overview.end.point <- 'overview.json?'
key <- '2f6f47e7312b49239cd7617099bee3fe'
date <- '2016-03-12'
full.url <- paste0(base.url, overview.end.point, 'published_date=', date, '&', 'api-key=', key)
results <- fromJSON(full.url)
# store data into a dataframe
flattened <- flatten(results$results$lists)
# store authors into a dataframe
list <- flattened[[9]]
authors <- list[[4]] %>% select(author)
num.authors <- summarise(authors, count = n())
week <- list[['weeks_on_list']] %>% select(weeks_on_list)
# store authors into a dataframe
list <- flattened[[9]]
authors <- list[[4]] %>% select(author)
num.authors <- summarise(authors, count = n())
week <- list[[23]] %>% select(weeks_on_list)
authors <- list[[4]] %>% select(author)
View(authors)
list[[23]]
list[[4]]
print(list[[23]])
weeks <- list[[23]] %>% select('weeks_on_list')
View(weeks)
# store authors into a dataframe
list <- flattened[[9]]
authors <- list[[4]] %>% select(author)
num.authors <- summarise(authors, count = n())
weeks <- list[[17]] %>% select(publisher)
View(week)
weeks <- list[[23]] %>% select(weeks_on_list)
View(weeks)
weeks <- list[[23]]
flattened <- flatten(results$results$lists)
View(flattened)
list <- flattened[['books']]
list <- flattened[['books']]
authors <- list[['author']] %>% select(author)
list <- flattened[['books']]
View(authors)
list <- flattened[['books']]
authors <- list[['author']] %>% select(author)
authors <- list[[4]] %>% select(author)
View(authors)
############### things to work on ###############
# make widget to retrieve date from user input
# replace empty rows with zeros
# create dataframe for multiple authors
# load api key file
library(jsonlite)
library(dplyr)
# get data with API
base.url <- 'http://api.nytimes.com/svc/books/v3/lists/'
overview.end.point <- 'overview.json?'
key <- '2f6f47e7312b49239cd7617099bee3fe'
date <- '2016-04-12'
full.url <- paste0(base.url, overview.end.point, 'published_date=', date, '&', 'api-key=', key)
results <- fromJSON(full.url)
# store data into a dataframe
flattened <- flatten(results$results$lists)
# store authors into a dataframe
list <- flattened[['books']]
authors <- list[[4]] %>% select(author)
num.authors <- summarise(authors, count = n())
weeks <- list[[23]] %>% select(weeks_on_list)
key <- '2f6f47e7312b49239cd7617099bee3fe'
library(jsonlite)
library(dplyr)
key <- '2f6f47e7312b49239cd7617099bee3fe'
date <- '2016-02-14'
base.url <-"https://api.nytimes.com/svc/books/v3/lists/overview.json"
query.params <-list("api-key"=key, "published_date"=date)
response <- GET(base.url, query = query.params)
response <- GET(base.url, query = query.params)
library(jsonlite)
response <- GET(base.url, query = query.params)
key <- '2f6f47e7312b49239cd7617099bee3fe'
date <-'2016-02-14'
OneDateInfo <- function (date, key) {
base.url <-"https://api.nytimes.com/svc/books/v3/lists/overview.json"
query.params <-list("api-key"=key, "published_date"=date)
response <- GET(base.url, query = query.params)
response <- GET(base.url, query = query.params)
response <- GET(base.url, query = query.params)
key <- '2f6f47e7312b49239cd7617099bee3fe'
date <-'2016-02-14'
base.url <-"https://api.nytimes.com/svc/books/v3/lists/overview.json"
query.params <-list("api-key"=key, "published_date"=date)
response <- GET(base.url, query = query.params)
results <- as.data.frame(fromJSON(full.url))
flattened <- flatten(results$results.lists.books)
flattened <- flatten(results$results.lists.books[[23]])
View(flattened)
flattened <- results$results.lists.books[[23]]
library(httr)
library(jsonlite)
library(tidytext)
library(dplyr)
library(stringr)
library(ggplot2)
library(rvest)
library(curl)
source("api.key.R")
UserCombinedInfo <- function(startdate,enddate) {
time.period <-seq(as.Date("2016-03-12"), as.Date("2016-03-14"), by=1)
OneDateInfo <- function (date) {
key <- "2f6f47e7312b49239cd7617099bee3fe"
base.url <-"https://api.nytimes.com/svc/books/v3/lists/overview.json"
query.params <-list("api-key"=yiran.api.key, "published_date"=date)
response <- GET(base.url, query = query.params)
body <-content (response, "text")
results <-as.data.frame(fromJSON(body))
UsefulInfo <- by(results,1:nrow(results),function(row){
each <-as.data.frame(row$results.lists.books)
return(each)
})
all.useful <-do.call(rbind,UsefulInfo)
}
}
results <-as.data.frame(fromJSON(body))
date <- '2016-02-02'
key <- "2f6f47e7312b49239cd7617099bee3fe"
base.url <-"https://api.nytimes.com/svc/books/v3/lists/overview.json"
query.params <-list("api-key"=yiran.api.key, "published_date"=date)
response <- GET(base.url, query = query.params)
body <-content (response, "text")
results <-as.data.frame(fromJSON(body))
date <- '2016-02-02'
key <- "2f6f47e7312b49239cd7617099bee3fe"
base.url <-"https://api.nytimes.com/svc/books/v3/lists/overview.json"
query.params <-list("api-key"=key, "published_date"=date)
response <- GET(base.url, query = query.params)
body <-content (response, "text")
results <-as.data.frame(fromJSON(body))
results$results.lists.books
is.list(results$results.lists.books)
list <- results$results.lists.books
library(httr)
library(jsonlite)
library(tidytext)
library(dplyr)
library(stringr)
library(ggplot2)
library(rvest)
library(curl)
#source("api.key.R")
date <- '2016-02-02'
key <- "2f6f47e7312b49239cd7617099bee3fe"
base.url <-"https://api.nytimes.com/svc/books/v3/lists/overview.json"
query.params <-list("api-key"=key, "published_date"=date)
response <- GET(base.url, query = query.params)
body <-content (response, "text")
results <-as.data.frame(fromJSON(body))
list <- results$results.lists.books
list <- as.data.frame(results$results.lists.books)
View(list)
list.1 <- list %>% select(author,title,weeks_on_list)
list.2 <- list %>% select(author.8)
list.2
row.names(list)
colnames(list)
t(list)
View(list)
list <- as.data.frame(results$results.lists.books)
t(list)
View(list.1)
length(results$results.lists.books)
datalist <- list()
for (i in 1:5) {
dat <- data.frame(x = rnorm(10), y = runif(10))
dat$i <- i
datalist[[i]] <- dat
}
list <- as.data.frame(results$results.lists.books)
info_total <- list %>% select(author,title,weeks_on_list)
datalist <- list()
for (i in 2:5) {
info <- list %>% select(author, title, weeks_on_list)
df <- data.frame(info)
df_total <- rbind(info_total, df)
}
View(info_total)
View(df_total)
View(list)
colnames(list)[which(names(list) == "author1")] <- "author"
View(list)
colnames(list)[which(names(list) == "author.1")] <- "author"
info <- list %>% select(author, title, weeks_on_list)
list <- as.data.frame(results$results.lists.books)
colnames(list)[which(names(list) == "author.1")] <- "author"
colnames(list)[which(names(list) == "title.1")] <- "title"
colnames(list)[which(names(list) == "weeks_on_list.1")] <- "weeks_on_list"
info <- list %>% select(author, title, weeks_on_list)
datalist <- list()
for (i in 2:5) {
info <- list %>% select(author, title, weeks_on_list)
df <- data.frame(info)
info_total <- rbind(info_total, df)
}
info <- list %>% select(author, title, weeks_on_list)
info <- list %>% select(author.2, title.2, weeks_on_list.2)
list <- as.data.frame(results$results.lists.books)
colnames(list)[which(names(list) == "author.1")] <- "author"
colnames(list)[which(names(list) == "title.1")] <- "title"
colnames(list)[which(names(list) == "weeks_on_list.1")] <- "weeks_on_list"
info <- list %>% select(author.2, title.2, weeks_on_list.2)
date <- '2016-02-02'
key <- "2f6f47e7312b49239cd7617099bee3fe"
base.url <-"https://api.nytimes.com/svc/books/v3/lists/overview.json"
query.params <-list("api-key"=key, "published_date"=date)
response <- GET(base.url, query = query.params)
body <-content (response, "text")
results <-as.data.frame(fromJSON(body))
list <- as.data.frame(results$results.lists.books)
colnames(list)[which(names(list) == "author.1")] <- "author"
colnames(list)[which(names(list) == "title.1")] <- "title"
colnames(list)[which(names(list) == "weeks_on_list.1")] <- "weeks_on_list"
info <- list %>% select(author.2, title.2, weeks_on_list.2)
list <- as.data.frame(results$results.lists.books)
View(list.2)
View(list.1)
View(list.2)
info2 <- list %>% select(author.2, title.2, weeks_on_list.2)
View(info2)
info2 <- list %>% select(author, title, weeks_on_list)
View(info2)
View(list)
list <- as.data.frame(results$results.lists.books)
colnames(list)[which(names(list) == "author.1")] <- "author"
colnames(list)[which(names(list) == "title.1")] <- "title"
colnames(list)[which(names(list) == "weeks_on_list.1")] <- "weeks_on_list"
info2 <- list %>% select(author, title, weeks_on_list)
list <- as.data.frame(results$results.lists.books)
colnames(list)[which(names(list) == "author.1")] <- "author"
colnames(list)[which(names(list) == "title.1")] <- "title"
colnames(list)[which(names(list) == "weeks_on_list.1")] <- "weeks_on_list"
info3 <- list %>% select(author, title, weeks_on_list)
